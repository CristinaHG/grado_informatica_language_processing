Terminals unused in grammar

   PLUSLESS
   DOUBLE_QUOTE
   SINGLE_QUOTE
   OP_DEC_PRE
   OP_INC_PRE
   OP_DEC_POS
   OP_INC_POS
   OP_INDEX


State 155 conflicts: 1 shift/reduce


Grammar

    0 $accept: Principal $end

    1 Principal: header_program block

    2 block: start_block local_var_dec sub_progs sentences end_block
    3      | start_block local_var_dec sub_progs end_block

    4 sub_progs: sub_progs sub_prog
    5          | %empty

    6 sub_prog: header_subprogram block

    7 local_var_dec: VARINI local_var VARFIN
    8              | %empty

    9 header_program: INICIO_PROGRAMA
   10               | error

   11 start_block: LEFT_CURLY

   12 end_block: RIGHT_CURLY

   13 local_var: local_var var_body
   14          | var_body

   15 var_body: type array_or_id SEMICOLON
   16         | type array_or_id error
   17         | error

   18 type: primitive_type
   19     | error

   20 primitive_type: TYPE

   21 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA expr RIGHT_SQUARE_BRACKET
   22            | IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   23            | array_or_id COMMA IDENTIFIER
   24            | IDENTIFIER

   25 header_subprogram: type IDENTIFIER LEFT_BRACKET parameters RIGHT_BRACKET
   26                  | type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   27 parameters: parameters COMMA type IDENTIFIER
   28           | type IDENTIFIER

   29 sentences: sentences sentence
   30          | sentence

   31 sentence: block
   32         | sentence_assign
   33         | sentence_if_then_else
   34         | sentence_while
   35         | sentence_input
   36         | sentence_output
   37         | sentence_return
   38         | sentence_switch

   39 sentence_assign: IDENTIFIER EQUAL expr SEMICOLON

   40 sentence_if_then_else: IF LEFT_BRACKET expr RIGHT_BRACKET sentence
   41                      | IF LEFT_BRACKET expr RIGHT_BRACKET sentence ELSE sentence

   42 sentence_while: WHILE LEFT_BRACKET expr RIGHT_BRACKET sentence

   43 sentence_switch: SELECT LEFT_BRACKET expr RIGHT_BRACKET start_block switch_cases end_block

   44 switch_cases: CASE expr COLON switch_block switch_cases
   45             | CASE expr COLON switch_block

   46 switch_block: local_var_dec sub_progs sentences BREAK SEMICOLON

   47 sentence_input: ENTER STRING COMMA array_or_id
   48               | ENTER array_or_id

   49 sentence_output: EXIT list_expr_string SEMICOLON

   50 list_expr_string: list_expr_string COMMA expr_cad
   51                 | expr_cad

   52 array: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA expr RIGHT_SQUARE_BRACKET
   53      | IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET

   54 expr_cad: expr

   55 expr: LEFT_BRACKET expr RIGHT_BRACKET
   56     | OP_PLUSLESS expr
   57     | UNARY_OPERATOR expr
   58     | expr OP_PLUSLESS expr
   59     | expr OP_MUL expr
   60     | expr OP_REL expr
   61     | expr OP_NEQ_EQ expr
   62     | expr OP_OR expr
   63     | expr OP_AND expr
   64     | expr OP_XOR expr
   65     | IDENTIFIER
   66     | array
   67     | const
   68     | function_call
   69     | error

   70 sentence_return: RETURN expr SEMICOLON

   71 function_call: IDENTIFIER LEFT_BRACKET list_expr RIGHT_BRACKET
   72              | IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

   73 list_expr: list_expr COMMA expr
   74          | expr

   75 const: INT
   76      | FLOAT
   77      | BOOL
   78      | CHAR
   79      | array_constant
   80      | STRING

   81 array_constant: LEFT_SQUARE_BRACKET list_int_const RIGHT_SQUARE_BRACKET
   82               | LEFT_SQUARE_BRACKET list_int_const SEMICOLON list_int_const RIGHT_SQUARE_BRACKET
   83               | LEFT_SQUARE_BRACKET list_float_const RIGHT_SQUARE_BRACKET
   84               | LEFT_SQUARE_BRACKET list_float_const SEMICOLON list_float_const RIGHT_SQUARE_BRACKET
   85               | LEFT_SQUARE_BRACKET list_boolean_const RIGHT_SQUARE_BRACKET
   86               | LEFT_SQUARE_BRACKET list_boolean_const SEMICOLON list_boolean_const RIGHT_SQUARE_BRACKET
   87               | LEFT_SQUARE_BRACKET list_char_const RIGHT_SQUARE_BRACKET
   88               | LEFT_SQUARE_BRACKET list_char_const SEMICOLON list_char_const RIGHT_SQUARE_BRACKET
   89               | LEFT_SQUARE_BRACKET list_string_const RIGHT_SQUARE_BRACKET
   90               | LEFT_SQUARE_BRACKET list_string_const SEMICOLON list_string_const RIGHT_SQUARE_BRACKET
   91               | LEFT_SQUARE_BRACKET list_array_const RIGHT_SQUARE_BRACKET
   92               | LEFT_SQUARE_BRACKET list_array_const SEMICOLON list_array_const RIGHT_SQUARE_BRACKET

   93 list_int_const: list_int_const COMMA INT
   94               | INT

   95 list_float_const: list_float_const COMMA FLOAT
   96                 | FLOAT

   97 list_boolean_const: list_boolean_const COMMA BOOL
   98                   | BOOL

   99 list_char_const: list_char_const COMMA CHAR
  100                | CHAR

  101 list_string_const: list_string_const COMMA STRING
  102                  | STRING

  103 list_array_const: list_array_const COMMA array_constant
  104                 | array_constant


Terminals, with rules where they appear

$end (0) 0
error (256) 10 16 17 19 69
INICIO_PROGRAMA (258) 9
VARINI (259) 7
VARFIN (260) 7
LEFT_CURLY (261) 11
RIGHT_CURLY (262) 12
TYPE (263) 20
COMMA (264) 21 23 27 47 50 52 73 93 95 97 99 101 103
LEFT_BRACKET (265) 25 26 40 41 42 43 55 71 72
RIGHT_BRACKET (266) 25 26 40 41 42 43 55 71 72
EQUAL (267) 39
SEMICOLON (268) 15 39 46 49 70 82 84 86 88 90 92
IF (269) 40 41
ELSE (270) 41
WHILE (271) 42
SELECT (272) 43
CASE (273) 44 45
ENTER (274) 47 48
EXIT (275) 49
RETURN (276) 70
PLUSLESS (277)
BOOL (278) 77 97 98
LEFT_SQUARE_BRACKET (279) 21 22 52 53 81 82 83 84 85 86 87 88 89 90
    91 92
RIGHT_SQUARE_BRACKET (280) 21 22 52 53 81 82 83 84 85 86 87 88 89 90
    91 92
DOUBLE_QUOTE (281)
SINGLE_QUOTE (282)
OP_OR (283) 62
OP_AND (284) 63
OP_XOR (285) 64
OP_NEQ_EQ (286) 61
OP_REL (287) 60
OP_PLUSLESS (288) 56 58
OP_MUL (289) 59
OP_DEC_PRE (290)
OP_INC_PRE (291)
OP_DEC_POS (292)
OP_INC_POS (293)
OP_INDEX (294)
UNARY_OPERATOR (295) 57
INT (296) 75 93 94
FLOAT (297) 76 95 96
CHAR (298) 78 99 100
STRING (299) 47 80 101 102
IDENTIFIER (300) 21 22 23 24 25 26 27 28 39 52 53 65 71 72
BREAK (301) 46
COLON (302) 44 45


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
Principal (49)
    on left: 1, on right: 0
block (50)
    on left: 2 3, on right: 1 6 31
sub_progs (51)
    on left: 4 5, on right: 2 3 4 46
sub_prog (52)
    on left: 6, on right: 4
local_var_dec (53)
    on left: 7 8, on right: 2 3 46
header_program (54)
    on left: 9 10, on right: 1
start_block (55)
    on left: 11, on right: 2 3 43
end_block (56)
    on left: 12, on right: 2 3 43
local_var (57)
    on left: 13 14, on right: 7 13
var_body (58)
    on left: 15 16 17, on right: 13 14
type (59)
    on left: 18 19, on right: 15 16 25 26 27 28
primitive_type (60)
    on left: 20, on right: 18
array_or_id (61)
    on left: 21 22 23 24, on right: 15 16 23 47 48
header_subprogram (62)
    on left: 25 26, on right: 6
parameters (63)
    on left: 27 28, on right: 25 27
sentences (64)
    on left: 29 30, on right: 2 29 46
sentence (65)
    on left: 31 32 33 34 35 36 37 38, on right: 29 30 40 41 42
sentence_assign (66)
    on left: 39, on right: 32
sentence_if_then_else (67)
    on left: 40 41, on right: 33
sentence_while (68)
    on left: 42, on right: 34
sentence_switch (69)
    on left: 43, on right: 38
switch_cases (70)
    on left: 44 45, on right: 43 44
switch_block (71)
    on left: 46, on right: 44 45
sentence_input (72)
    on left: 47 48, on right: 35
sentence_output (73)
    on left: 49, on right: 36
list_expr_string (74)
    on left: 50 51, on right: 49 50
array (75)
    on left: 52 53, on right: 66
expr_cad (76)
    on left: 54, on right: 50 51
expr (77)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69, on right:
    21 22 39 40 41 42 43 44 45 52 53 54 55 56 57 58 59 60 61 62 63
    64 70 73 74
sentence_return (78)
    on left: 70, on right: 37
function_call (79)
    on left: 71 72, on right: 68
list_expr (80)
    on left: 73 74, on right: 71 73
const (81)
    on left: 75 76 77 78 79 80, on right: 67
array_constant (82)
    on left: 81 82 83 84 85 86 87 88 89 90 91 92, on right: 79 103
    104
list_int_const (83)
    on left: 93 94, on right: 81 82 93
list_float_const (84)
    on left: 95 96, on right: 83 84 95
list_boolean_const (85)
    on left: 97 98, on right: 85 86 97
list_char_const (86)
    on left: 99 100, on right: 87 88 99
list_string_const (87)
    on left: 101 102, on right: 89 90 101
list_array_const (88)
    on left: 103 104, on right: 91 92 103


State 0

    0 $accept: . Principal $end

    error            shift, and go to state 1
    INICIO_PROGRAMA  shift, and go to state 2

    Principal       go to state 3
    header_program  go to state 4


State 1

   10 header_program: error .

    $default  reduce using rule 10 (header_program)


State 2

    9 header_program: INICIO_PROGRAMA .

    $default  reduce using rule 9 (header_program)


State 3

    0 $accept: Principal . $end

    $end  shift, and go to state 5


State 4

    1 Principal: header_program . block

    LEFT_CURLY  shift, and go to state 6

    block        go to state 7
    start_block  go to state 8


State 5

    0 $accept: Principal $end .

    $default  accept


State 6

   11 start_block: LEFT_CURLY .

    $default  reduce using rule 11 (start_block)


State 7

    1 Principal: header_program block .

    $default  reduce using rule 1 (Principal)


State 8

    2 block: start_block . local_var_dec sub_progs sentences end_block
    3      | start_block . local_var_dec sub_progs end_block

    VARINI  shift, and go to state 9

    $default  reduce using rule 8 (local_var_dec)

    local_var_dec  go to state 10


State 9

    7 local_var_dec: VARINI . local_var VARFIN

    error  shift, and go to state 11
    TYPE   shift, and go to state 12

    local_var       go to state 13
    var_body        go to state 14
    type            go to state 15
    primitive_type  go to state 16


State 10

    2 block: start_block local_var_dec . sub_progs sentences end_block
    3      | start_block local_var_dec . sub_progs end_block

    $default  reduce using rule 5 (sub_progs)

    sub_progs  go to state 17


State 11

   17 var_body: error .
   19 type: error .

    IDENTIFIER  reduce using rule 19 (type)
    $default    reduce using rule 17 (var_body)


State 12

   20 primitive_type: TYPE .

    $default  reduce using rule 20 (primitive_type)


State 13

    7 local_var_dec: VARINI local_var . VARFIN
   13 local_var: local_var . var_body

    error   shift, and go to state 11
    VARFIN  shift, and go to state 18
    TYPE    shift, and go to state 12

    var_body        go to state 19
    type            go to state 15
    primitive_type  go to state 16


State 14

   14 local_var: var_body .

    $default  reduce using rule 14 (local_var)


State 15

   15 var_body: type . array_or_id SEMICOLON
   16         | type . array_or_id error

    IDENTIFIER  shift, and go to state 20

    array_or_id  go to state 21


State 16

   18 type: primitive_type .

    $default  reduce using rule 18 (type)


State 17

    2 block: start_block local_var_dec sub_progs . sentences end_block
    3      | start_block local_var_dec sub_progs . end_block
    4 sub_progs: sub_progs . sub_prog

    error        shift, and go to state 22
    LEFT_CURLY   shift, and go to state 6
    RIGHT_CURLY  shift, and go to state 23
    TYPE         shift, and go to state 12
    IF           shift, and go to state 24
    WHILE        shift, and go to state 25
    SELECT       shift, and go to state 26
    ENTER        shift, and go to state 27
    EXIT         shift, and go to state 28
    RETURN       shift, and go to state 29
    IDENTIFIER   shift, and go to state 30

    block                  go to state 31
    sub_prog               go to state 32
    start_block            go to state 8
    end_block              go to state 33
    type                   go to state 34
    primitive_type         go to state 16
    header_subprogram      go to state 35
    sentences              go to state 36
    sentence               go to state 37
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 18

    7 local_var_dec: VARINI local_var VARFIN .

    $default  reduce using rule 7 (local_var_dec)


State 19

   13 local_var: local_var var_body .

    $default  reduce using rule 13 (local_var)


State 20

   21 array_or_id: IDENTIFIER . LEFT_SQUARE_BRACKET expr COMMA expr RIGHT_SQUARE_BRACKET
   22            | IDENTIFIER . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   24            | IDENTIFIER .

    LEFT_SQUARE_BRACKET  shift, and go to state 45

    $default  reduce using rule 24 (array_or_id)


State 21

   15 var_body: type array_or_id . SEMICOLON
   16         | type array_or_id . error
   23 array_or_id: array_or_id . COMMA IDENTIFIER

    error      shift, and go to state 46
    COMMA      shift, and go to state 47
    SEMICOLON  shift, and go to state 48


State 22

   19 type: error .

    $default  reduce using rule 19 (type)


State 23

   12 end_block: RIGHT_CURLY .

    $default  reduce using rule 12 (end_block)


State 24

   40 sentence_if_then_else: IF . LEFT_BRACKET expr RIGHT_BRACKET sentence
   41                      | IF . LEFT_BRACKET expr RIGHT_BRACKET sentence ELSE sentence

    LEFT_BRACKET  shift, and go to state 49


State 25

   42 sentence_while: WHILE . LEFT_BRACKET expr RIGHT_BRACKET sentence

    LEFT_BRACKET  shift, and go to state 50


State 26

   43 sentence_switch: SELECT . LEFT_BRACKET expr RIGHT_BRACKET start_block switch_cases end_block

    LEFT_BRACKET  shift, and go to state 51


State 27

   47 sentence_input: ENTER . STRING COMMA array_or_id
   48               | ENTER . array_or_id

    STRING      shift, and go to state 52
    IDENTIFIER  shift, and go to state 20

    array_or_id  go to state 53


State 28

   49 sentence_output: EXIT . list_expr_string SEMICOLON

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    list_expr_string  go to state 65
    array             go to state 66
    expr_cad          go to state 67
    expr              go to state 68
    function_call     go to state 69
    const             go to state 70
    array_constant    go to state 71


State 29

   70 sentence_return: RETURN . expr SEMICOLON

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 72
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 30

   39 sentence_assign: IDENTIFIER . EQUAL expr SEMICOLON

    EQUAL  shift, and go to state 73


State 31

   31 sentence: block .

    $default  reduce using rule 31 (sentence)


State 32

    4 sub_progs: sub_progs sub_prog .

    $default  reduce using rule 4 (sub_progs)


State 33

    3 block: start_block local_var_dec sub_progs end_block .

    $default  reduce using rule 3 (block)


State 34

   25 header_subprogram: type . IDENTIFIER LEFT_BRACKET parameters RIGHT_BRACKET
   26                  | type . IDENTIFIER LEFT_BRACKET RIGHT_BRACKET

    IDENTIFIER  shift, and go to state 74


State 35

    6 sub_prog: header_subprogram . block

    LEFT_CURLY  shift, and go to state 6

    block        go to state 75
    start_block  go to state 8


State 36

    2 block: start_block local_var_dec sub_progs sentences . end_block
   29 sentences: sentences . sentence

    LEFT_CURLY   shift, and go to state 6
    RIGHT_CURLY  shift, and go to state 23
    IF           shift, and go to state 24
    WHILE        shift, and go to state 25
    SELECT       shift, and go to state 26
    ENTER        shift, and go to state 27
    EXIT         shift, and go to state 28
    RETURN       shift, and go to state 29
    IDENTIFIER   shift, and go to state 30

    block                  go to state 31
    start_block            go to state 8
    end_block              go to state 76
    sentence               go to state 77
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 37

   30 sentences: sentence .

    $default  reduce using rule 30 (sentences)


State 38

   32 sentence: sentence_assign .

    $default  reduce using rule 32 (sentence)


State 39

   33 sentence: sentence_if_then_else .

    $default  reduce using rule 33 (sentence)


State 40

   34 sentence: sentence_while .

    $default  reduce using rule 34 (sentence)


State 41

   38 sentence: sentence_switch .

    $default  reduce using rule 38 (sentence)


State 42

   35 sentence: sentence_input .

    $default  reduce using rule 35 (sentence)


State 43

   36 sentence: sentence_output .

    $default  reduce using rule 36 (sentence)


State 44

   37 sentence: sentence_return .

    $default  reduce using rule 37 (sentence)


State 45

   21 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET . expr COMMA expr RIGHT_SQUARE_BRACKET
   22            | IDENTIFIER LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 78
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 46

   16 var_body: type array_or_id error .

    $default  reduce using rule 16 (var_body)


State 47

   23 array_or_id: array_or_id COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 79


State 48

   15 var_body: type array_or_id SEMICOLON .

    $default  reduce using rule 15 (var_body)


State 49

   40 sentence_if_then_else: IF LEFT_BRACKET . expr RIGHT_BRACKET sentence
   41                      | IF LEFT_BRACKET . expr RIGHT_BRACKET sentence ELSE sentence

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 80
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 50

   42 sentence_while: WHILE LEFT_BRACKET . expr RIGHT_BRACKET sentence

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 81
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 51

   43 sentence_switch: SELECT LEFT_BRACKET . expr RIGHT_BRACKET start_block switch_cases end_block

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 82
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 52

   47 sentence_input: ENTER STRING . COMMA array_or_id

    COMMA  shift, and go to state 83


State 53

   23 array_or_id: array_or_id . COMMA IDENTIFIER
   48 sentence_input: ENTER array_or_id .

    COMMA  shift, and go to state 47

    $default  reduce using rule 48 (sentence_input)


State 54

   69 expr: error .

    $default  reduce using rule 69 (expr)


State 55

   55 expr: LEFT_BRACKET . expr RIGHT_BRACKET

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 84
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 56

   77 const: BOOL .

    $default  reduce using rule 77 (const)


State 57

   81 array_constant: LEFT_SQUARE_BRACKET . list_int_const RIGHT_SQUARE_BRACKET
   82               | LEFT_SQUARE_BRACKET . list_int_const SEMICOLON list_int_const RIGHT_SQUARE_BRACKET
   83               | LEFT_SQUARE_BRACKET . list_float_const RIGHT_SQUARE_BRACKET
   84               | LEFT_SQUARE_BRACKET . list_float_const SEMICOLON list_float_const RIGHT_SQUARE_BRACKET
   85               | LEFT_SQUARE_BRACKET . list_boolean_const RIGHT_SQUARE_BRACKET
   86               | LEFT_SQUARE_BRACKET . list_boolean_const SEMICOLON list_boolean_const RIGHT_SQUARE_BRACKET
   87               | LEFT_SQUARE_BRACKET . list_char_const RIGHT_SQUARE_BRACKET
   88               | LEFT_SQUARE_BRACKET . list_char_const SEMICOLON list_char_const RIGHT_SQUARE_BRACKET
   89               | LEFT_SQUARE_BRACKET . list_string_const RIGHT_SQUARE_BRACKET
   90               | LEFT_SQUARE_BRACKET . list_string_const SEMICOLON list_string_const RIGHT_SQUARE_BRACKET
   91               | LEFT_SQUARE_BRACKET . list_array_const RIGHT_SQUARE_BRACKET
   92               | LEFT_SQUARE_BRACKET . list_array_const SEMICOLON list_array_const RIGHT_SQUARE_BRACKET

    BOOL                 shift, and go to state 85
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    INT                  shift, and go to state 86
    FLOAT                shift, and go to state 87
    CHAR                 shift, and go to state 88
    STRING               shift, and go to state 89

    array_constant      go to state 90
    list_int_const      go to state 91
    list_float_const    go to state 92
    list_boolean_const  go to state 93
    list_char_const     go to state 94
    list_string_const   go to state 95
    list_array_const    go to state 96


State 58

   56 expr: OP_PLUSLESS . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 97
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 59

   57 expr: UNARY_OPERATOR . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 98
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 60

   75 const: INT .

    $default  reduce using rule 75 (const)


State 61

   76 const: FLOAT .

    $default  reduce using rule 76 (const)


State 62

   78 const: CHAR .

    $default  reduce using rule 78 (const)


State 63

   80 const: STRING .

    $default  reduce using rule 80 (const)


State 64

   52 array: IDENTIFIER . LEFT_SQUARE_BRACKET expr COMMA expr RIGHT_SQUARE_BRACKET
   53      | IDENTIFIER . LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET
   65 expr: IDENTIFIER .
   71 function_call: IDENTIFIER . LEFT_BRACKET list_expr RIGHT_BRACKET
   72              | IDENTIFIER . LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET         shift, and go to state 99
    LEFT_SQUARE_BRACKET  shift, and go to state 100

    $default  reduce using rule 65 (expr)


State 65

   49 sentence_output: EXIT list_expr_string . SEMICOLON
   50 list_expr_string: list_expr_string . COMMA expr_cad

    COMMA      shift, and go to state 101
    SEMICOLON  shift, and go to state 102


State 66

   66 expr: array .

    $default  reduce using rule 66 (expr)


State 67

   51 list_expr_string: expr_cad .

    $default  reduce using rule 51 (list_expr_string)


State 68

   54 expr_cad: expr .
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    OP_OR        shift, and go to state 103
    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 54 (expr_cad)


State 69

   68 expr: function_call .

    $default  reduce using rule 68 (expr)


State 70

   67 expr: const .

    $default  reduce using rule 67 (expr)


State 71

   79 const: array_constant .

    $default  reduce using rule 79 (const)


State 72

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr
   70 sentence_return: RETURN expr . SEMICOLON

    SEMICOLON    shift, and go to state 110
    OP_OR        shift, and go to state 103
    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109


State 73

   39 sentence_assign: IDENTIFIER EQUAL . expr SEMICOLON

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 111
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 74

   25 header_subprogram: type IDENTIFIER . LEFT_BRACKET parameters RIGHT_BRACKET
   26                  | type IDENTIFIER . LEFT_BRACKET RIGHT_BRACKET

    LEFT_BRACKET  shift, and go to state 112


State 75

    6 sub_prog: header_subprogram block .

    $default  reduce using rule 6 (sub_prog)


State 76

    2 block: start_block local_var_dec sub_progs sentences end_block .

    $default  reduce using rule 2 (block)


State 77

   29 sentences: sentences sentence .

    $default  reduce using rule 29 (sentences)


State 78

   21 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET expr . COMMA expr RIGHT_SQUARE_BRACKET
   22            | IDENTIFIER LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    COMMA                 shift, and go to state 113
    RIGHT_SQUARE_BRACKET  shift, and go to state 114
    OP_OR                 shift, and go to state 103
    OP_AND                shift, and go to state 104
    OP_XOR                shift, and go to state 105
    OP_NEQ_EQ             shift, and go to state 106
    OP_REL                shift, and go to state 107
    OP_PLUSLESS           shift, and go to state 108
    OP_MUL                shift, and go to state 109


State 79

   23 array_or_id: array_or_id COMMA IDENTIFIER .

    $default  reduce using rule 23 (array_or_id)


State 80

   40 sentence_if_then_else: IF LEFT_BRACKET expr . RIGHT_BRACKET sentence
   41                      | IF LEFT_BRACKET expr . RIGHT_BRACKET sentence ELSE sentence
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    RIGHT_BRACKET  shift, and go to state 115
    OP_OR          shift, and go to state 103
    OP_AND         shift, and go to state 104
    OP_XOR         shift, and go to state 105
    OP_NEQ_EQ      shift, and go to state 106
    OP_REL         shift, and go to state 107
    OP_PLUSLESS    shift, and go to state 108
    OP_MUL         shift, and go to state 109


State 81

   42 sentence_while: WHILE LEFT_BRACKET expr . RIGHT_BRACKET sentence
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    RIGHT_BRACKET  shift, and go to state 116
    OP_OR          shift, and go to state 103
    OP_AND         shift, and go to state 104
    OP_XOR         shift, and go to state 105
    OP_NEQ_EQ      shift, and go to state 106
    OP_REL         shift, and go to state 107
    OP_PLUSLESS    shift, and go to state 108
    OP_MUL         shift, and go to state 109


State 82

   43 sentence_switch: SELECT LEFT_BRACKET expr . RIGHT_BRACKET start_block switch_cases end_block
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    RIGHT_BRACKET  shift, and go to state 117
    OP_OR          shift, and go to state 103
    OP_AND         shift, and go to state 104
    OP_XOR         shift, and go to state 105
    OP_NEQ_EQ      shift, and go to state 106
    OP_REL         shift, and go to state 107
    OP_PLUSLESS    shift, and go to state 108
    OP_MUL         shift, and go to state 109


State 83

   47 sentence_input: ENTER STRING COMMA . array_or_id

    IDENTIFIER  shift, and go to state 20

    array_or_id  go to state 118


State 84

   55 expr: LEFT_BRACKET expr . RIGHT_BRACKET
   58     | expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    RIGHT_BRACKET  shift, and go to state 119
    OP_OR          shift, and go to state 103
    OP_AND         shift, and go to state 104
    OP_XOR         shift, and go to state 105
    OP_NEQ_EQ      shift, and go to state 106
    OP_REL         shift, and go to state 107
    OP_PLUSLESS    shift, and go to state 108
    OP_MUL         shift, and go to state 109


State 85

   98 list_boolean_const: BOOL .

    $default  reduce using rule 98 (list_boolean_const)


State 86

   94 list_int_const: INT .

    $default  reduce using rule 94 (list_int_const)


State 87

   96 list_float_const: FLOAT .

    $default  reduce using rule 96 (list_float_const)


State 88

  100 list_char_const: CHAR .

    $default  reduce using rule 100 (list_char_const)


State 89

  102 list_string_const: STRING .

    $default  reduce using rule 102 (list_string_const)


State 90

  104 list_array_const: array_constant .

    $default  reduce using rule 104 (list_array_const)


State 91

   81 array_constant: LEFT_SQUARE_BRACKET list_int_const . RIGHT_SQUARE_BRACKET
   82               | LEFT_SQUARE_BRACKET list_int_const . SEMICOLON list_int_const RIGHT_SQUARE_BRACKET
   93 list_int_const: list_int_const . COMMA INT

    COMMA                 shift, and go to state 120
    SEMICOLON             shift, and go to state 121
    RIGHT_SQUARE_BRACKET  shift, and go to state 122


State 92

   83 array_constant: LEFT_SQUARE_BRACKET list_float_const . RIGHT_SQUARE_BRACKET
   84               | LEFT_SQUARE_BRACKET list_float_const . SEMICOLON list_float_const RIGHT_SQUARE_BRACKET
   95 list_float_const: list_float_const . COMMA FLOAT

    COMMA                 shift, and go to state 123
    SEMICOLON             shift, and go to state 124
    RIGHT_SQUARE_BRACKET  shift, and go to state 125


State 93

   85 array_constant: LEFT_SQUARE_BRACKET list_boolean_const . RIGHT_SQUARE_BRACKET
   86               | LEFT_SQUARE_BRACKET list_boolean_const . SEMICOLON list_boolean_const RIGHT_SQUARE_BRACKET
   97 list_boolean_const: list_boolean_const . COMMA BOOL

    COMMA                 shift, and go to state 126
    SEMICOLON             shift, and go to state 127
    RIGHT_SQUARE_BRACKET  shift, and go to state 128


State 94

   87 array_constant: LEFT_SQUARE_BRACKET list_char_const . RIGHT_SQUARE_BRACKET
   88               | LEFT_SQUARE_BRACKET list_char_const . SEMICOLON list_char_const RIGHT_SQUARE_BRACKET
   99 list_char_const: list_char_const . COMMA CHAR

    COMMA                 shift, and go to state 129
    SEMICOLON             shift, and go to state 130
    RIGHT_SQUARE_BRACKET  shift, and go to state 131


State 95

   89 array_constant: LEFT_SQUARE_BRACKET list_string_const . RIGHT_SQUARE_BRACKET
   90               | LEFT_SQUARE_BRACKET list_string_const . SEMICOLON list_string_const RIGHT_SQUARE_BRACKET
  101 list_string_const: list_string_const . COMMA STRING

    COMMA                 shift, and go to state 132
    SEMICOLON             shift, and go to state 133
    RIGHT_SQUARE_BRACKET  shift, and go to state 134


State 96

   91 array_constant: LEFT_SQUARE_BRACKET list_array_const . RIGHT_SQUARE_BRACKET
   92               | LEFT_SQUARE_BRACKET list_array_const . SEMICOLON list_array_const RIGHT_SQUARE_BRACKET
  103 list_array_const: list_array_const . COMMA array_constant

    COMMA                 shift, and go to state 135
    SEMICOLON             shift, and go to state 136
    RIGHT_SQUARE_BRACKET  shift, and go to state 137


State 97

   56 expr: OP_PLUSLESS expr .
   58     | expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    $default  reduce using rule 56 (expr)


State 98

   57 expr: UNARY_OPERATOR expr .
   58     | expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    $default  reduce using rule 57 (expr)


State 99

   71 function_call: IDENTIFIER LEFT_BRACKET . list_expr RIGHT_BRACKET
   72              | IDENTIFIER LEFT_BRACKET . RIGHT_BRACKET

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    RIGHT_BRACKET        shift, and go to state 138
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 139
    function_call   go to state 69
    list_expr       go to state 140
    const           go to state 70
    array_constant  go to state 71


State 100

   52 array: IDENTIFIER LEFT_SQUARE_BRACKET . expr COMMA expr RIGHT_SQUARE_BRACKET
   53      | IDENTIFIER LEFT_SQUARE_BRACKET . expr RIGHT_SQUARE_BRACKET

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 141
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 101

   50 list_expr_string: list_expr_string COMMA . expr_cad

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr_cad        go to state 142
    expr            go to state 68
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 102

   49 sentence_output: EXIT list_expr_string SEMICOLON .

    $default  reduce using rule 49 (sentence_output)


State 103

   62 expr: expr OP_OR . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 143
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 104

   63 expr: expr OP_AND . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 144
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 105

   64 expr: expr OP_XOR . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 145
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 106

   61 expr: expr OP_NEQ_EQ . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 146
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 107

   60 expr: expr OP_REL . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 147
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 108

   58 expr: expr OP_PLUSLESS . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 148
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 109

   59 expr: expr OP_MUL . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 149
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 110

   70 sentence_return: RETURN expr SEMICOLON .

    $default  reduce using rule 70 (sentence_return)


State 111

   39 sentence_assign: IDENTIFIER EQUAL expr . SEMICOLON
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    SEMICOLON    shift, and go to state 150
    OP_OR        shift, and go to state 103
    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109


State 112

   25 header_subprogram: type IDENTIFIER LEFT_BRACKET . parameters RIGHT_BRACKET
   26                  | type IDENTIFIER LEFT_BRACKET . RIGHT_BRACKET

    error          shift, and go to state 22
    TYPE           shift, and go to state 12
    RIGHT_BRACKET  shift, and go to state 151

    type            go to state 152
    primitive_type  go to state 16
    parameters      go to state 153


State 113

   21 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA . expr RIGHT_SQUARE_BRACKET

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 154
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 114

   22 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 22 (array_or_id)


State 115

   40 sentence_if_then_else: IF LEFT_BRACKET expr RIGHT_BRACKET . sentence
   41                      | IF LEFT_BRACKET expr RIGHT_BRACKET . sentence ELSE sentence

    LEFT_CURLY  shift, and go to state 6
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    SELECT      shift, and go to state 26
    ENTER       shift, and go to state 27
    EXIT        shift, and go to state 28
    RETURN      shift, and go to state 29
    IDENTIFIER  shift, and go to state 30

    block                  go to state 31
    start_block            go to state 8
    sentence               go to state 155
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 116

   42 sentence_while: WHILE LEFT_BRACKET expr RIGHT_BRACKET . sentence

    LEFT_CURLY  shift, and go to state 6
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    SELECT      shift, and go to state 26
    ENTER       shift, and go to state 27
    EXIT        shift, and go to state 28
    RETURN      shift, and go to state 29
    IDENTIFIER  shift, and go to state 30

    block                  go to state 31
    start_block            go to state 8
    sentence               go to state 156
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 117

   43 sentence_switch: SELECT LEFT_BRACKET expr RIGHT_BRACKET . start_block switch_cases end_block

    LEFT_CURLY  shift, and go to state 6

    start_block  go to state 157


State 118

   23 array_or_id: array_or_id . COMMA IDENTIFIER
   47 sentence_input: ENTER STRING COMMA array_or_id .

    COMMA  shift, and go to state 47

    $default  reduce using rule 47 (sentence_input)


State 119

   55 expr: LEFT_BRACKET expr RIGHT_BRACKET .

    $default  reduce using rule 55 (expr)


State 120

   93 list_int_const: list_int_const COMMA . INT

    INT  shift, and go to state 158


State 121

   82 array_constant: LEFT_SQUARE_BRACKET list_int_const SEMICOLON . list_int_const RIGHT_SQUARE_BRACKET

    INT  shift, and go to state 86

    list_int_const  go to state 159


State 122

   81 array_constant: LEFT_SQUARE_BRACKET list_int_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 81 (array_constant)


State 123

   95 list_float_const: list_float_const COMMA . FLOAT

    FLOAT  shift, and go to state 160


State 124

   84 array_constant: LEFT_SQUARE_BRACKET list_float_const SEMICOLON . list_float_const RIGHT_SQUARE_BRACKET

    FLOAT  shift, and go to state 87

    list_float_const  go to state 161


State 125

   83 array_constant: LEFT_SQUARE_BRACKET list_float_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 83 (array_constant)


State 126

   97 list_boolean_const: list_boolean_const COMMA . BOOL

    BOOL  shift, and go to state 162


State 127

   86 array_constant: LEFT_SQUARE_BRACKET list_boolean_const SEMICOLON . list_boolean_const RIGHT_SQUARE_BRACKET

    BOOL  shift, and go to state 85

    list_boolean_const  go to state 163


State 128

   85 array_constant: LEFT_SQUARE_BRACKET list_boolean_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 85 (array_constant)


State 129

   99 list_char_const: list_char_const COMMA . CHAR

    CHAR  shift, and go to state 164


State 130

   88 array_constant: LEFT_SQUARE_BRACKET list_char_const SEMICOLON . list_char_const RIGHT_SQUARE_BRACKET

    CHAR  shift, and go to state 88

    list_char_const  go to state 165


State 131

   87 array_constant: LEFT_SQUARE_BRACKET list_char_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 87 (array_constant)


State 132

  101 list_string_const: list_string_const COMMA . STRING

    STRING  shift, and go to state 166


State 133

   90 array_constant: LEFT_SQUARE_BRACKET list_string_const SEMICOLON . list_string_const RIGHT_SQUARE_BRACKET

    STRING  shift, and go to state 89

    list_string_const  go to state 167


State 134

   89 array_constant: LEFT_SQUARE_BRACKET list_string_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 89 (array_constant)


State 135

  103 list_array_const: list_array_const COMMA . array_constant

    LEFT_SQUARE_BRACKET  shift, and go to state 57

    array_constant  go to state 168


State 136

   92 array_constant: LEFT_SQUARE_BRACKET list_array_const SEMICOLON . list_array_const RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 57

    array_constant    go to state 90
    list_array_const  go to state 169


State 137

   91 array_constant: LEFT_SQUARE_BRACKET list_array_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 91 (array_constant)


State 138

   72 function_call: IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 72 (function_call)


State 139

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr
   74 list_expr: expr .

    OP_OR        shift, and go to state 103
    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 74 (list_expr)


State 140

   71 function_call: IDENTIFIER LEFT_BRACKET list_expr . RIGHT_BRACKET
   73 list_expr: list_expr . COMMA expr

    COMMA          shift, and go to state 170
    RIGHT_BRACKET  shift, and go to state 171


State 141

   52 array: IDENTIFIER LEFT_SQUARE_BRACKET expr . COMMA expr RIGHT_SQUARE_BRACKET
   53      | IDENTIFIER LEFT_SQUARE_BRACKET expr . RIGHT_SQUARE_BRACKET
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    COMMA                 shift, and go to state 172
    RIGHT_SQUARE_BRACKET  shift, and go to state 173
    OP_OR                 shift, and go to state 103
    OP_AND                shift, and go to state 104
    OP_XOR                shift, and go to state 105
    OP_NEQ_EQ             shift, and go to state 106
    OP_REL                shift, and go to state 107
    OP_PLUSLESS           shift, and go to state 108
    OP_MUL                shift, and go to state 109


State 142

   50 list_expr_string: list_expr_string COMMA expr_cad .

    $default  reduce using rule 50 (list_expr_string)


State 143

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   62     | expr OP_OR expr .
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 62 (expr)


State 144

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   63     | expr OP_AND expr .
   64     | expr . OP_XOR expr

    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 63 (expr)


State 145

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr
   64     | expr OP_XOR expr .

    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 64 (expr)


State 146

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   61     | expr OP_NEQ_EQ expr .
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 61 (expr)


State 147

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   60     | expr OP_REL expr .
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 60 (expr)


State 148

   58 expr: expr . OP_PLUSLESS expr
   58     | expr OP_PLUSLESS expr .
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    OP_MUL  shift, and go to state 109

    $default  reduce using rule 58 (expr)


State 149

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   59     | expr OP_MUL expr .
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    $default  reduce using rule 59 (expr)


State 150

   39 sentence_assign: IDENTIFIER EQUAL expr SEMICOLON .

    $default  reduce using rule 39 (sentence_assign)


State 151

   26 header_subprogram: type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET .

    $default  reduce using rule 26 (header_subprogram)


State 152

   28 parameters: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 174


State 153

   25 header_subprogram: type IDENTIFIER LEFT_BRACKET parameters . RIGHT_BRACKET
   27 parameters: parameters . COMMA type IDENTIFIER

    COMMA          shift, and go to state 175
    RIGHT_BRACKET  shift, and go to state 176


State 154

   21 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA expr . RIGHT_SQUARE_BRACKET
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    RIGHT_SQUARE_BRACKET  shift, and go to state 177
    OP_OR                 shift, and go to state 103
    OP_AND                shift, and go to state 104
    OP_XOR                shift, and go to state 105
    OP_NEQ_EQ             shift, and go to state 106
    OP_REL                shift, and go to state 107
    OP_PLUSLESS           shift, and go to state 108
    OP_MUL                shift, and go to state 109


State 155

   40 sentence_if_then_else: IF LEFT_BRACKET expr RIGHT_BRACKET sentence .
   41                      | IF LEFT_BRACKET expr RIGHT_BRACKET sentence . ELSE sentence

    ELSE  shift, and go to state 178

    ELSE      [reduce using rule 40 (sentence_if_then_else)]
    $default  reduce using rule 40 (sentence_if_then_else)


State 156

   42 sentence_while: WHILE LEFT_BRACKET expr RIGHT_BRACKET sentence .

    $default  reduce using rule 42 (sentence_while)


State 157

   43 sentence_switch: SELECT LEFT_BRACKET expr RIGHT_BRACKET start_block . switch_cases end_block

    CASE  shift, and go to state 179

    switch_cases  go to state 180


State 158

   93 list_int_const: list_int_const COMMA INT .

    $default  reduce using rule 93 (list_int_const)


State 159

   82 array_constant: LEFT_SQUARE_BRACKET list_int_const SEMICOLON list_int_const . RIGHT_SQUARE_BRACKET
   93 list_int_const: list_int_const . COMMA INT

    COMMA                 shift, and go to state 120
    RIGHT_SQUARE_BRACKET  shift, and go to state 181


State 160

   95 list_float_const: list_float_const COMMA FLOAT .

    $default  reduce using rule 95 (list_float_const)


State 161

   84 array_constant: LEFT_SQUARE_BRACKET list_float_const SEMICOLON list_float_const . RIGHT_SQUARE_BRACKET
   95 list_float_const: list_float_const . COMMA FLOAT

    COMMA                 shift, and go to state 123
    RIGHT_SQUARE_BRACKET  shift, and go to state 182


State 162

   97 list_boolean_const: list_boolean_const COMMA BOOL .

    $default  reduce using rule 97 (list_boolean_const)


State 163

   86 array_constant: LEFT_SQUARE_BRACKET list_boolean_const SEMICOLON list_boolean_const . RIGHT_SQUARE_BRACKET
   97 list_boolean_const: list_boolean_const . COMMA BOOL

    COMMA                 shift, and go to state 126
    RIGHT_SQUARE_BRACKET  shift, and go to state 183


State 164

   99 list_char_const: list_char_const COMMA CHAR .

    $default  reduce using rule 99 (list_char_const)


State 165

   88 array_constant: LEFT_SQUARE_BRACKET list_char_const SEMICOLON list_char_const . RIGHT_SQUARE_BRACKET
   99 list_char_const: list_char_const . COMMA CHAR

    COMMA                 shift, and go to state 129
    RIGHT_SQUARE_BRACKET  shift, and go to state 184


State 166

  101 list_string_const: list_string_const COMMA STRING .

    $default  reduce using rule 101 (list_string_const)


State 167

   90 array_constant: LEFT_SQUARE_BRACKET list_string_const SEMICOLON list_string_const . RIGHT_SQUARE_BRACKET
  101 list_string_const: list_string_const . COMMA STRING

    COMMA                 shift, and go to state 132
    RIGHT_SQUARE_BRACKET  shift, and go to state 185


State 168

  103 list_array_const: list_array_const COMMA array_constant .

    $default  reduce using rule 103 (list_array_const)


State 169

   92 array_constant: LEFT_SQUARE_BRACKET list_array_const SEMICOLON list_array_const . RIGHT_SQUARE_BRACKET
  103 list_array_const: list_array_const . COMMA array_constant

    COMMA                 shift, and go to state 135
    RIGHT_SQUARE_BRACKET  shift, and go to state 186


State 170

   73 list_expr: list_expr COMMA . expr

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 187
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 171

   71 function_call: IDENTIFIER LEFT_BRACKET list_expr RIGHT_BRACKET .

    $default  reduce using rule 71 (function_call)


State 172

   52 array: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA . expr RIGHT_SQUARE_BRACKET

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 188
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 173

   53 array: IDENTIFIER LEFT_SQUARE_BRACKET expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 53 (array)


State 174

   28 parameters: type IDENTIFIER .

    $default  reduce using rule 28 (parameters)


State 175

   27 parameters: parameters COMMA . type IDENTIFIER

    error  shift, and go to state 22
    TYPE   shift, and go to state 12

    type            go to state 189
    primitive_type  go to state 16


State 176

   25 header_subprogram: type IDENTIFIER LEFT_BRACKET parameters RIGHT_BRACKET .

    $default  reduce using rule 25 (header_subprogram)


State 177

   21 array_or_id: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 21 (array_or_id)


State 178

   41 sentence_if_then_else: IF LEFT_BRACKET expr RIGHT_BRACKET sentence ELSE . sentence

    LEFT_CURLY  shift, and go to state 6
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    SELECT      shift, and go to state 26
    ENTER       shift, and go to state 27
    EXIT        shift, and go to state 28
    RETURN      shift, and go to state 29
    IDENTIFIER  shift, and go to state 30

    block                  go to state 31
    start_block            go to state 8
    sentence               go to state 190
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 179

   44 switch_cases: CASE . expr COLON switch_block switch_cases
   45             | CASE . expr COLON switch_block

    error                shift, and go to state 54
    LEFT_BRACKET         shift, and go to state 55
    BOOL                 shift, and go to state 56
    LEFT_SQUARE_BRACKET  shift, and go to state 57
    OP_PLUSLESS          shift, and go to state 58
    UNARY_OPERATOR       shift, and go to state 59
    INT                  shift, and go to state 60
    FLOAT                shift, and go to state 61
    CHAR                 shift, and go to state 62
    STRING               shift, and go to state 63
    IDENTIFIER           shift, and go to state 64

    array           go to state 66
    expr            go to state 191
    function_call   go to state 69
    const           go to state 70
    array_constant  go to state 71


State 180

   43 sentence_switch: SELECT LEFT_BRACKET expr RIGHT_BRACKET start_block switch_cases . end_block

    RIGHT_CURLY  shift, and go to state 23

    end_block  go to state 192


State 181

   82 array_constant: LEFT_SQUARE_BRACKET list_int_const SEMICOLON list_int_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 82 (array_constant)


State 182

   84 array_constant: LEFT_SQUARE_BRACKET list_float_const SEMICOLON list_float_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 84 (array_constant)


State 183

   86 array_constant: LEFT_SQUARE_BRACKET list_boolean_const SEMICOLON list_boolean_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 86 (array_constant)


State 184

   88 array_constant: LEFT_SQUARE_BRACKET list_char_const SEMICOLON list_char_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 88 (array_constant)


State 185

   90 array_constant: LEFT_SQUARE_BRACKET list_string_const SEMICOLON list_string_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 90 (array_constant)


State 186

   92 array_constant: LEFT_SQUARE_BRACKET list_array_const SEMICOLON list_array_const RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 92 (array_constant)


State 187

   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr
   73 list_expr: list_expr COMMA expr .

    OP_OR        shift, and go to state 103
    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109

    $default  reduce using rule 73 (list_expr)


State 188

   52 array: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA expr . RIGHT_SQUARE_BRACKET
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    RIGHT_SQUARE_BRACKET  shift, and go to state 193
    OP_OR                 shift, and go to state 103
    OP_AND                shift, and go to state 104
    OP_XOR                shift, and go to state 105
    OP_NEQ_EQ             shift, and go to state 106
    OP_REL                shift, and go to state 107
    OP_PLUSLESS           shift, and go to state 108
    OP_MUL                shift, and go to state 109


State 189

   27 parameters: parameters COMMA type . IDENTIFIER

    IDENTIFIER  shift, and go to state 194


State 190

   41 sentence_if_then_else: IF LEFT_BRACKET expr RIGHT_BRACKET sentence ELSE sentence .

    $default  reduce using rule 41 (sentence_if_then_else)


State 191

   44 switch_cases: CASE expr . COLON switch_block switch_cases
   45             | CASE expr . COLON switch_block
   58 expr: expr . OP_PLUSLESS expr
   59     | expr . OP_MUL expr
   60     | expr . OP_REL expr
   61     | expr . OP_NEQ_EQ expr
   62     | expr . OP_OR expr
   63     | expr . OP_AND expr
   64     | expr . OP_XOR expr

    OP_OR        shift, and go to state 103
    OP_AND       shift, and go to state 104
    OP_XOR       shift, and go to state 105
    OP_NEQ_EQ    shift, and go to state 106
    OP_REL       shift, and go to state 107
    OP_PLUSLESS  shift, and go to state 108
    OP_MUL       shift, and go to state 109
    COLON        shift, and go to state 195


State 192

   43 sentence_switch: SELECT LEFT_BRACKET expr RIGHT_BRACKET start_block switch_cases end_block .

    $default  reduce using rule 43 (sentence_switch)


State 193

   52 array: IDENTIFIER LEFT_SQUARE_BRACKET expr COMMA expr RIGHT_SQUARE_BRACKET .

    $default  reduce using rule 52 (array)


State 194

   27 parameters: parameters COMMA type IDENTIFIER .

    $default  reduce using rule 27 (parameters)


State 195

   44 switch_cases: CASE expr COLON . switch_block switch_cases
   45             | CASE expr COLON . switch_block

    VARINI  shift, and go to state 9

    $default  reduce using rule 8 (local_var_dec)

    local_var_dec  go to state 196
    switch_block   go to state 197


State 196

   46 switch_block: local_var_dec . sub_progs sentences BREAK SEMICOLON

    $default  reduce using rule 5 (sub_progs)

    sub_progs  go to state 198


State 197

   44 switch_cases: CASE expr COLON switch_block . switch_cases
   45             | CASE expr COLON switch_block .

    CASE  shift, and go to state 179

    $default  reduce using rule 45 (switch_cases)

    switch_cases  go to state 199


State 198

    4 sub_progs: sub_progs . sub_prog
   46 switch_block: local_var_dec sub_progs . sentences BREAK SEMICOLON

    error       shift, and go to state 22
    LEFT_CURLY  shift, and go to state 6
    TYPE        shift, and go to state 12
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    SELECT      shift, and go to state 26
    ENTER       shift, and go to state 27
    EXIT        shift, and go to state 28
    RETURN      shift, and go to state 29
    IDENTIFIER  shift, and go to state 30

    block                  go to state 31
    sub_prog               go to state 32
    start_block            go to state 8
    type                   go to state 34
    primitive_type         go to state 16
    header_subprogram      go to state 35
    sentences              go to state 200
    sentence               go to state 37
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 199

   44 switch_cases: CASE expr COLON switch_block switch_cases .

    $default  reduce using rule 44 (switch_cases)


State 200

   29 sentences: sentences . sentence
   46 switch_block: local_var_dec sub_progs sentences . BREAK SEMICOLON

    LEFT_CURLY  shift, and go to state 6
    IF          shift, and go to state 24
    WHILE       shift, and go to state 25
    SELECT      shift, and go to state 26
    ENTER       shift, and go to state 27
    EXIT        shift, and go to state 28
    RETURN      shift, and go to state 29
    IDENTIFIER  shift, and go to state 30
    BREAK       shift, and go to state 201

    block                  go to state 31
    start_block            go to state 8
    sentence               go to state 77
    sentence_assign        go to state 38
    sentence_if_then_else  go to state 39
    sentence_while         go to state 40
    sentence_switch        go to state 41
    sentence_input         go to state 42
    sentence_output        go to state 43
    sentence_return        go to state 44


State 201

   46 switch_block: local_var_dec sub_progs sentences BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 202


State 202

   46 switch_block: local_var_dec sub_progs sentences BREAK SEMICOLON .

    $default  reduce using rule 46 (switch_block)
