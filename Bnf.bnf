<program>               ::= <header_program> <block>
                         |

<block>                 ::= <start_block>
                            <local_var_dec>
                            <sub_progs>
                            <sentences>
                            <end_block>

<sub_progs>             ::= <sub_progs> <sub_prog>
                         |

<sub_prog>              ::= <header_subprogram> <block>

<local_var_dec>         ::= iniVar
                            <local_var>
                            finVar
                         |

<header_program>        ::= Principal

<start_block>           ::= "{"

<end_block>             ::= "}"

<local_var>             ::= <local_var> <var_body>

<var_body>              ::= <type> <identifiers_list>

<type>                  ::= <primitive_type>
                         |  <array_type>

<primitive_type>        ::= entero
                         |  real
                         |  caracter
                         |  booleano

<array_type>            ::= arreglo <primitive_type>

<identifiers_list>      ::= <identifiers_list>, <identifier>
                         |  <identifier>

<header_subprogram>     ::= <type> <identifier> ( <parameters> )

<parameters>            ::= <parameters> , <type> <identifier>
                         |  <type> <identifier>

<sentences>             ::= <sentences> <sentence>
                         |  <sentence>

<sentence>              ::= <block>
                         |  <sentence_assign>
                         |  <sentence_if_then_else>
                         |  <sentence_while>
                         |  <sentence_input>
                         |  <sentence_output>
                         |  <sentence_return>
                         |  <sentence_switch>

<sentence_assign>       ::= <identifier> = <expr> ;

<sentence_if_then_else> ::= si ( <expr> ) <sentence>
                         |  si ( <expr> ) <sentence> sino <sentence>

<sentence_while>        ::= mientras ( <expr> ) <sentence>

<sentence_switch>       ::= selecciona ( <expr> ) <start_block> <switch_cases> <end_block>

<switch_cases>          ::= caso <expr> : <switch_block> <switch_cases>
                         |  caso <expr> : <switch_block>

<switch_block>          ::= <local_var_dec> <sub_progs> <sentences> romper ;

<sentence_input>        ::= entrada <identifiers_list>

<sentence_output>       ::= salida <list_expr_string> ;

<list_expr_string>      ::= <list_expr_string> <expr_cad>
                         |  <expr_cad>

<expr_cad>              ::= <expr>
                         |  <cad>

<cad>                   ::= \"[^\"]+\"

<expr>                  ::= ( <expr> )
                         |  <unary_op> <expr>
                         |  <identifier>
                         |  <const>
                         |  <function_call>
                         |  <expr> <binary_op> <expr>
                         
<sentence_return>       ::= devolver <expr> ;

<unary_op>              ::= !
                         |  +
                         |  -

<binary_op>             ::= +
                         |  -
                         |  *
                         |  /
                         |  '<'
                         |  '>'
                         |  '<='
                         |  '>='
                         |  ==
                         |  !=
                         |  o
                         |  y
                         |  xor

<function_call>         ::= <identifier> ( <list_expr> )
                         |  <identifier> ( )

<list_expr>             ::= <list_expr> COMMA <expr>
                         |  <expr>;

<const>                 ::= <int_constant>
                         |  <float_constant>
                         |  <boolean_constant>
                         |  <char_constant>
                         |  <array_constant>
                         |  <string_constant>

<int_constant>          ::= <numbers>

<numbers>               ::= <numbers> <integer>
                         |  <integer>

<float_constant>        ::= <float>

<float>                 ::= <numbers>.<numbers>

<boolean_constant>      ::= <boolean>

<boolean>               ::= verdadero
                         |  falso

<char_constant>         ::= <char>

<char>                  ::= \'[^\']\'

<integer>               ::= [0-9]

<string_constant>       ::= <string>

<string>                ::= \"[^\"]+\"

<identifier>            ::= [a-z,A-Z]([a-z,A-Z]|[0-9])*

<array_constant>        ::= [ <list_int_const> ] | [ <list_int_const> ; <list_int_const> ]
                         |  [ <list_float_const> ] | [ <list_float_const> ; <list_float_const> ]
                         |  [ <list_boolean_const> ] | [ <list_boolean_const> ; <list_boolean_const> ]
                         |  [ <list_char_const> ] | [ <list_char_const> ; <list_char_const> ]
                         |  [ <list_string_const> ] | [ <list_string_const> ; <list_string_const> ]
                         |  [ <list_array_const> ] | [ <list_array_const> ; <list_array_const> ]

<list_int_const>        ::= <list_int_const> , <int_constant>
                         |  <int_constant>

<list_float_const>      ::= <list_float_const> , <float_constant>
                         |  <float_constant>

<list_boolean_const>    ::= <list_boolean_const> , <boolean_constant>
                         |  <boolean_constant>

<list_char_const>       ::= <list_char_const> , <char_constant>
                         |  <char_constant>

<list_string_const>     ::= <list_string_const> , <string_constant>
                         |  <string_constant>

<list_array_const>      ::= <list_array_const> , <array_constant>
                         |  <array_constant>
